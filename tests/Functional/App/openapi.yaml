openapi: 3.0.1
info:
  title: Pet store
  version: 1.0.0

paths:
  /pets:
    get:
      description: |
        This description contains a test if %abc% is not attempted to be resolved as
        Symfony service container parameter.
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\GetPetsController'
        additionalRouteAttributes:
          responseSerializationSchemaObject: 'Pet'
      parameters:
        - name: filterByName
          in: query
          required: false
          schema:
            type: string
            minLength: 3
        - $ref: '#/components/parameters/ItemsPerPage'
      responses:
        '200':
          description: Successfully retrieved the pets from the store.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
      tags:
        - pet
    post:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\CreatePetController'
      summary: Add a new pet to the store.
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '201':
          description: Successfully added a new pet to the store.
        '400':
          description: Invalid input
        '422':
          description: Invalid input
      tags:
        - pet

    patch:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\UpdatePetsController'
        deserializationObject: 'Nijens\OpenapiBundle\Tests\Functional\App\Model\UpdatePet[]'
        deserializationObjectArgumentName: 'updatePets'
        additionalRouteAttributes:
          responseSerializationSchemaObject: 'Pet'
      summary: Batch update multiple pets in the store.
      operationId: updateMultiplePets
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePet'
        required: true
      responses:
        '200':
          description: Successfully updated pets in the store.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
        '422':
          description: Invalid input
      tags:
        - pet

  /pets/{petId}:
    get:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\GetPetController'
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      responses:
        200:
          description: Successfully retrieved the pet from the store.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      tags:
        - pet

    post:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\UpdatePetController'
        deserializationObject: 'Nijens\OpenapiBundle\Tests\Functional\App\Model\UpdatePet'
        additionalRouteAttributes:
          responseSerializationSchemaObject: 'Pet'
      summary: Updates a pet in the store.
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        200:
          description: Successfully updated the pet in the store.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid input.
      tags:
        - pet

    parameters:
      - name: petId
        in: path
        description: ID of the pet.
        required: true
        schema:
          type: integer
          format: int64

  /authenticated/pets:
    post:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\CreatePetController'
      summary: Add a new pet to the store.
      operationId: addPetAuthenticated
      requestBody:
        description: Pet object that needs to be added to the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '201':
          description: Successfully added a new pet to the store.
        '400':
          description: Invalid input
        '422':
          description: Invalid input
      security:
        - api_key: []
      tags:
        - pet

  /error/trigger-error:
    get:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\ErrorController::triggerError'
      responses:
        '500':
          description: Returns an error.
      tags:
        - error

  /error/throw-error:
    get:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\ErrorController::throwError'
      responses:
        '500':
          description: Returns an error.
      tags:
        - error

  /error/throw-http-exception:
    get:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\ErrorController::throwHttpException'
      responses:
        '500':
          description: Returns an error.
      tags:
        - error

  /error/throw-exception:
    get:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\ErrorController::throwException'
      responses:
        '500':
          description: Returns an error.
      tags:
        - error

  /error/throw-invalid-argument-exception:
    get:
      x-openapi-bundle:
        controller: 'Nijens\OpenapiBundle\Tests\Functional\App\Controller\ErrorController::throwInvalidArgumentException'
      responses:
        '500':
          description: Returns an error.
      tags:
        - error

components:
  parameters:
    ItemsPerPage:
      name: itemsPerPage
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 30

  schemas:
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          example: Doggie
        status:
          type: string
          description: pet status in the store
          default: available
          enum:
            - available
            - pending
            - sold
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - name
        - photoUrls
      xml:
        name: Pet

    UpdatePet:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              readOnly: false
          required:
            - id

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
      xml:
        name: Category

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag

  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header

tags:
  - name: pet
    description: Everything about your pets.
  - name: error
    description: Paths that ALWAYS return an error! -_-
